function das3_buildmodel
	% builds the das3 MEX function
    
    % TODO: we could speed this up by skipping unnecessary steps based on file
    % date/time (like Make would do)

	% file names
	osimfile = '../das3.osim';
	Autolevfile = 'das3.al';
	MEXtemplate = 'das3_mex_template.c';
	newMEX = 'das3.c';

	% load the model
    addpath('..');
	model = das3_readosim(osimfile);
    rmpath('..');
	
	% make the file das3.al, run it, and clean the output to generate das3_al.c
	das3_makeAutolev(model, Autolevfile);
	minutes = 11;
	runautolev(Autolevfile, minutes);
	autolevclean(model, 'das3_al_raw.c')
	
	% make das3.h and das3.c, and compile to make the MEX binary
	das3_makeMEX(model, MEXtemplate, newMEX);
	
end
%===============================================================================================
function [rebuild] = needs_rebuild(file, dependencies)
	% check if the file needs to be rebuilt, based on dependencies
	%
	% Input:
	%	file..................(string) Name of file we are checking for
	%   dependencies..........(cell array of strings) files that this new file depends on
	%
	% Output:
	%	rebuild.........(logical) true if file must be rebuilt
	
	% if file does not exist, it has to be rebuilt
	if ~exist(file)
		rebuild = true;
		return
	end
	
	% if any of the parent files have changed, rebuild
	rebuild = false;
	for i = 1:numel(dependencies)
		if mdate(dependencies{i}) > mdate(file)
			rebuild = true;
			fprintf('\nRebuilding %s because of changes in %s\n', file, dependencies{i});
		end
	end
end
%==============================================================================================
function filedate = mdate(filename)
	% determines the date when the file was last modified
	if ~exist(filename)
		error(['filedate: ' filename ' does not exist.']);
	end
	file_info = dir(which(filename));
	filedate = file_info.datenum;
end
%==============================================================================================
function runautolev(filename, minutes)
	% Autolev location depends on computer
	[~,computername] = system('hostname');
	if strfind(computername,'LRI-102855')
		autolev = 'C:\Program Files\Autolev\al.exe';
	else
		autolev = [];
	end
		
	% Run Autolev
	if ~exist(autolev)
		disp(['Error: Autolev needs to generate ' filename '_raw.c, but you do not have Autolev installed.']);
		disp('Ask Ton to run this part of the build process.');
		disp(['Hit ENTER to continue with existing ' filename '_al_raw.c, or CTRL-C to quit']);
		pause
	else
		warning('off', 'MATLAB:DELETE:FileNotFound');	% don't warn me if the file does not exist
		delete([filename '_raw.c']);		% we need to delete the .c and .in files so Autolev won't ask for overwrite permission
		delete([filename '_raw.in']);
		warning('on', 'MATLAB:DELETE:FileNotFound');
		
		fprintf('Autolev is generating %s\n',[filename '_raw.c']);
		fprintf('Estimated completion at %s...\n', datestr(addtodate(now, minutes, 'minute')));
		
		if ispc
			system(['"' autolev '" ' filename '.al > nul']);		% double quotes needed because autolev has spaces in its path
		else
			system(['wine "' autolev '" ' filename '.al > nul']);		% double quotes needed because autolev has spaces in its path
		end
		% check if Autolev was successful
		if ~exist([filename '_raw.c'])
			warning(['Autolev error in ' filename '.al']);
		end
		delete([filename '_raw.in']);
		fprintf('Done.\n');
	end
end
%===================================================================================================
function autolevclean(model)
	disp('Cleaning C code generated by Autolev...');

	% open the raw C file that came from Autolev
	fid1 = fopen([name 'das3_al_raw.c'],'r');
	if (fid1 == -1)
		error('Could not open das3_al_raw.c');
	end
	
	% write the clean C file
	fid2 = fopen([name 'das3_al.c'],'w');
	if (fid2 == -1)
		error('Could not write das3_al.c');
	end
	
	% write the function header
	fprintf(fid2,'// This file was generated by autolevclean.c and contains C code generated by Autolev\n\n');
	fprintf(fid2,'#include ''das3.h''\n');
	fprintf(fid2,'#include <math.h>\n\n');
	fprintf(fid2,'void das3_al(param_struct* par, double q[NDOF], double qd[NDOF], double qdd[NDOF],\n');
	fprintf(fid2,'   double mTH[3], double exF[2], double handF[3], double Zero[NDOF], double dz_dq[NDOF][NDOF],\n');
	fprintf(fid2,'   double dz_dqd[NDOF][NDOF], double dz_dqdd[NDOF][NDOF],\n');
	fprintf(fid2,'   double F_GH[3], double F_SCAP[2][3], double dist_SCAP[2], double pos_SCAP[2][3],\n');
	fprintf(fid2,'   double vis[NVIS][12], double qTH[3]) {\n');

	% make a macro for the 'sign' function
	fprintf(fid2,'#define sign(x) ((x > 0) - (x < 0))\n');

	% generate C code to copy q, qd, and qdd into scalar variables
	for i=1:model.nDofs
		fprintf(fid2,'	double %s = q[%1d];\n', model.dofs{i}.name,i-1);
		fprintf(fid2,'	double %sp = qd[%1d];\n', model.dofs{i}.name,i-1);
		fprintf(fid2,'	double %spp = qdd[%1d];\n', model.dofs{i}.name,i-1);
    end		

	% declare variables for constrained coordinates
	% declare some internal variables
	fprintf(fid2,'	double MHx, MHy, MHz;\n');

	% generate C code to copy the 3 thorax-humerus into scalar variables
	fprintf(fid2,'	double MTHy = mTH[0];\n');
	fprintf(fid2,'	double MTHz = mTH[1];\n');
	fprintf(fid2,'	double MTHyy = mTH[2];\n');

	% generate C code to copy forearm force description (arm support) into scalar variables
	fprintf(fid2,'	double distF = exF[0];\n');
	fprintf(fid2,'	double ampF = exF[1];\n');

	% generate C code to copy hand force description into scalar variables
	fprintf(fid2,'	double handFx = handF[0];\n');
	fprintf(fid2,'	double handFy = handF[1];\n');
	fprintf(fid2,'	double handFz = handF[2];\n');

	% generate C code to declare the temporary variables used in contact force model and conoid force model
	fprintf(fid2,'	double PxCE,PyCE,PzCE;\n');		
	fprintf(fid2,'	double PxTS,PyTS,PzTS,FxTS,FyTS,FzTS,FTS,FminusTS;\n');		
	fprintf(fid2,'	double PxAI,PyAI,PzAI,FxAI,FyAI,FzAI,FAI,FminusAI;\n');	
	fprintf(fid2,'	double LOI, Stretch, StretchPositive;\n');		

	% copy the necessary parts of C code from fid1 to fid2
	copying = 0;
	while ~feof(fid1)
		line = fgetl(fid1);
		if strncmp(line, 'double   Pi,DEGtoRAD,RADtoDEG,z[', 32)
			zlength = line(33:min(findstr(line,']'))-1);
			fprintf(fid2,'\tstatic double z[%d];\n',str2num(zlength));		% make sure there is enough room for all Zs
		end
		if strcmp(line, '/* Evaluate constants */') 				% Z[] code starts here
			copying = 1;
        elseif strcmp(line, '/* Evaluate output quantities */') 	% Z[] code ends here
			copying = 0;
        elseif strcmp(line, '/* Write output to screen and to output file(s) */')   % encoded variables code starts here
			copying = 1;
        elseif strcmp(line, '  Encode[0] = 0.0;') 								   % and stops here
			copying = 0;
        elseif copying
			line = strrep(line, 'par__', 'par->');			% change par__ into par->
			fprintf(fid2,'%s\n',line);
		end
	end
	
	% close the input file
	fclose(fid1);
	
	% close the output file
	fprintf(fid2,'}\n');
	fclose(fid2);

end
%===================================================================================================
